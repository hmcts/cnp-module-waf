{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "state": {
      "type": "array",
      "defaultValue": []
    },
    "source": {
      "type": "object"
    },
    "applicationGatewayID": {
      "type": "string"
    }
  },
  "variables": {
    "instance": 
      "[if(equals(tolower(parameters('source').Protocol), 'http'), if(equals(parameters('source').PickHostNameFromBackendAddress, 'True'), variables('instanceHTTP'), variables('instanceHTTPWithHostName')), if(equals(parameters('source').PickHostNameFromBackendAddress, 'True'), variables('instanceHTTPS'), variables('instanceHTTPSWithHostName')))]",
    "instanceHTTPS": [
      {
        "name": "[parameters('source').name]",
        "properties": {
          "Port": "[parameters('source').port]",
          "Protocol": "[parameters('source').Protocol]",
          "CookieBasedAffinity": "[parameters('source').CookieBasedAffinity]",
          "AuthenticationCertificates": [
            {
              "Id": "[concat(parameters('applicationGatewayID'), '/authenticationCertificates/', parameters('source').AuthenticationCertificates)]"
            }
          ],
          "ProbeEnabled": "[parameters('source').probeEnabled]",
          "Probe": {
            "id": "[concat(parameters('applicationGatewayID'), '/probes/', parameters('source').probe)]"
          },
          "PickHostNameFromBackendAddress": "[parameters('source').PickHostNameFromBackendAddress]"
        }
      }
    ],
    "instanceHTTPSWithHostName": [
      {
        "name": "[parameters('source').name]",
        "properties": {
          "Port": "[parameters('source').port]",
          "Protocol": "[parameters('source').Protocol]",
          "CookieBasedAffinity": "[parameters('source').CookieBasedAffinity]",
          "AuthenticationCertificates": [
            {
              "Id": "[concat(parameters('applicationGatewayID'), '/authenticationCertificates/', parameters('source').AuthenticationCertificates)]"
            }
          ],
          "ProbeEnabled": "[parameters('source').probeEnabled]",
          "Probe": {
            "id": "[concat(parameters('applicationGatewayID'), '/probes/', parameters('source').probe)]"
          },
          "HostName": "[parameters('source').HostName]",
          "PickHostNameFromBackendAddress": "[parameters('source').PickHostNameFromBackendAddress]"
        }
      }
    ],
    "instanceHTTP": [
      {
        "name": "[parameters('source').name]",
        "properties": {
          "Port": "[parameters('source').port]",
          "Protocol": "[parameters('source').Protocol]",
          "CookieBasedAffinity": "[parameters('source').CookieBasedAffinity]",
          "ProbeEnabled": "[parameters('source').probeEnabled]",
          "Probe": {
            "id": "[concat(parameters('applicationGatewayID'), '/probes/', parameters('source').probe)]"
          },
          "PickHostNameFromBackendAddress": "[parameters('source').PickHostNameFromBackendAddress]"
        }
      }
    ],
    "instanceHTTPWithHostName": [
      {
        "name": "[parameters('source').name]",
        "properties": {
          "Port": "[parameters('source').port]",
          "Protocol": "[parameters('source').Protocol]",
          "CookieBasedAffinity": "[parameters('source').CookieBasedAffinity]",
          "ProbeEnabled": "[parameters('source').probeEnabled]",
          "Probe": {
            "id": "[concat(parameters('applicationGatewayID'), '/probes/', parameters('source').probe)]"
          },
          "HostName": "[parameters('source').HostName]",
          "PickHostNameFromBackendAddress": "[parameters('source').PickHostNameFromBackendAddress]"
        }
      }
    ]
  },
  "resources": [],
  "outputs": {
    "collection": {
      "type": "array",
      "value": "[concat(parameters('state'), variables('instance'))]"
    }
  }
}
